from django.contrib.sites.models import Siteimport jsonimport settingsSITE_URL = Site.objects.get_current().domainSTATIC_URL = settings.STATIC_URLtry:    basestring    import stringexcept:    # python 3    basestring = str    string = str        def GenPageHTML(head, body_arg):    head = GenHead(head)        body = GenBody(body_arg['topbar'], body_arg['content'])    html = {'tag': 'html', 'content': [head, body]};    return "<!DOCTYPE HTML>"+GenTagHTML(html);    #return 'ABC'def GenHead(head_arg):    # Sanitize input    if not('title' in head_arg):        head_arg['title'] = 'Class2Go'    if not('meta' in head_arg):        head_arg['meta'] = {}    if not('script_inline' in head_arg):        head_arg['script_inline'] = ''    if not('script_srcs' in head_arg):        head_arg['script_srcs'] = {}        head = {'tag': 'head', 'content': []}        # Title    head['content'].append({'tag': 'title', 'content': head_arg['title']})        # Metatags    for k,c in head_arg['meta'].iteritems():        head['content'].append({'tag': 'meta', 'attributes': {'name': k, 'content': c}, 'single': True})        # CSS links. Stylesheets that go on every page are appended by this module. No need to supply them from outside    head_arg['css'].append(STATIC_URL + 'css/core/body.css')    head_arg['css'].append(STATIC_URL + 'css/core/buttons.css')    head_arg['css'].append(STATIC_URL + 'css/core/layout.css')    head_arg['css'].append(STATIC_URL + 'css/core/topbar.css')    head_arg['css'].append(STATIC_URL + 'css/core/loginreg.css')        for css_path in head_arg['css']:        head['content'].append({'tag': 'link', 'attributes': {'rel': 'stylesheet', 'type': 'text/css', 'href': css_path}, 'single': True})        # JS sources. Sources that go on every page are appended by this module. No need to supply them from outside    head_arg['script_srcs'].append('http://ajax.googleapis.com/ajax/libs/jquery/1.7.2/jquery.min.js')    head_arg['script_srcs'].append(STATIC_URL + 'js/core/resize.js')        for js_path in head_arg['script_srcs']:        head['content'].append({'tag': 'script', 'attributes': {'type': 'text/javascript', 'src': js_path}})        # Inline JS        if len(head_arg['script_inline']) > 0:        head['content'].append({'tag': 'script', 'content': head_arg['script_inline']})        return head        def GenBody(topbar, content):        body = {'tag': 'body', 'content': [{'tag': 'div', 'attributes': {'id': 'viewport'}, 'content': []}]}    viewport = body['content'][0]        # Topbar    viewport['content'].append(topbar)        # Content    if 'l' in content:        try:            viewport['content'].append({'tag': 'div', 'attributes': {'id': 'c2g_layout_l_column'}, 'content': content['l']['content']})        except KeyError:            return {'tag': 'body', 'content': 'A missing key was detected in left-column content dict. Please verify that the left column content dict specifies content and width keys'}        try:        viewport['content'].append({'tag': 'div', 'attributes': {'id': 'c2g_layout_m_column'}, 'content': content['m']['content']})    except KeyError:            return {'tag': 'body', 'content': 'A missing key was detected in middle-column content dict. Please verify that the middle column content dict specifies content and width keys'}                            if 'r' in content:        try:            viewport['content'].append({'tag': 'div', 'attributes': {'id': 'c2g_layout_r_column'}, 'content': content['r']['content']})        except KeyError:            return {'tag': 'body', 'content': 'A missing key was detected in right-column content dict. Please verify that the right column content dict specifies content and width keys'}        # Login/Reg form    # @todo: Show this only if logged-out    loginreg_canvas = {'tag': 'div', 'attributes': {'id': 'loginreg_canvas'}, 'content':[]}    loginreg_background = {'tag': 'div', 'attributes': {'id': 'loginreg_background', 'onclick': "$('#loginreg_canvas').hide()"}, 'content':[]}    loginreg_container = {'tag': 'div', 'attributes': {'id': 'loginreg_container'}, 'content':[]}    loginreg_canvas['content'].extend([loginreg_background,loginreg_container])        login_container = {'tag': 'div', 'attributes': {'id': 'login_container'}, 'content':[]}    reg_container = {'tag': 'div', 'attributes': {'id': 'reg_container'}, 'content':[]}    loginreg_separator = {'tag': 'div', 'attributes': {'id': 'loginreg_separator'}, 'content':[]}        loginreg_container['content'].extend([reg_container,loginreg_separator,login_container])        reg_form_content = """    <h2 style='color:#800000;'>Registration</h2>    <table>        <tr>            <td><label for='reg_first_name'>First name:</label></td>            <td><input name='first_name' id='reg_first_name' style='width:180px;'></td>        </tr>        <tr>            <td><label for='reg_last_name'>Last name:</label></td>            <td><input name='last_name' id='reg_last_name' style='width:180px;'></td>        </tr>        <tr>            <td><label for='reg_email'>Email:</label></td>            <td><input name='email' id='reg_email' style='width:180px;'></td>        </tr>        <tr>            <td><label for='reg_username'>Username:</label></td>            <td><input name='username' id='reg_username' style='width:180px;'></td>        </tr>        <tr>            <td><label for='reg_password'>Password:</label></td>            <td><input type='password' name='password' id='reg_password' style='width:180px;'></td>        </tr>        <tr>            <td><label for='reg_password2'>Re-enter password:</label></td>            <td><input type='password' id='reg_password2' style='width:180px;'></td>        </tr>    </table>    <input type='submit' class='cw_button' value='Register' style='margin: 10px; float: right;'/>    """    reg_container['content'].append({'tag': 'form', 'attributes': {'action': SITE_URL + 'accounts/', 'method': 'PUT'}, 'content': reg_form_content})        login_form_content = """    <h2 style='color:#800000;'>Login</h2>    <table>        <tr>            <td><label for='login_username'>Username:</label></td>            <td><input name='username' id='login_username' style='width:180px;'></td>        </tr>        <tr>            <td><label for='login_password'>Password:</label></td>            <td><input type='password' name='password' id='login_password' style='width:180px;'></td>        </tr>    </table>    <input type='submit' class='cw_button' value='Login' style='margin: 10px; float: right;'/>    """    login_container['content'].append({'tag': 'form', 'attributes': {'action': SITE_URL + 'accounts/login/', 'method': 'POST'}, 'content': login_form_content})            viewport['content'].append(loginreg_canvas)        # Make the layout div widths available to JS    widths = {}    if 'width' in content['m']:        widths['m'] = content['m']['width']    if 'min-width' in content['m']:        widths['m_min'] = content['m']['min-width']    if 'max-width' in content['m']:        widths['m_max'] = content['m']['max-width']    if 'l' in content:        widths['l'] = content['l']['width']    if 'r' in content:        widths['r'] = content['r']['width']        body['content'].append({'tag': 'script', 'attributes': {'type': 'text/javascript'}, 'content': ('layout_widths = %s;' % json.dumps(widths))+'resize_page_contents();'})        return body            def GenTagHTML(tag_dict):    """ Takes a dict specifying a tag and its attributes and inner content (which may be a list of tag dicts) and produces the corresponding markup"""        """        tag_dict keys:        tag: The name of the tag        attributes: A dictionary of attributes. Attributes without values may be passed in as attributes with a value of None        content: A string or a list of tag_dicts        single: Optional and defaults to false. If true, the tag is closed like <..... />    """        if not('tag' in tag_dict):        return ''        out = "<%s" % tag_dict['tag']        if ('attributes' in tag_dict) and (tag_dict['attributes'] is not None):        for key, value in tag_dict['attributes'].iteritems():            if value is not None:               # when value is None that means stuff like <... checked>                out = "%s %s=\"%s\"" % ( out, key, value  )            else:                out = "%s %s" % ( out, key )        if ('content' in tag_dict) and (tag_dict['content'] is not None):        if type(tag_dict['content']) is list:            inner_content_string = ''            for i in tag_dict['content']:                inner_content_string += GenTagHTML(i)                            out = "%s>%s</%s>" % ( out, inner_content_string, tag_dict['tag'] )        elif type(tag_dict['content']) is dict:            out = "%s>%s</%s>" % ( out, GenTagHTML(tag_dict['content']), tag_dict['tag'] )        else:            out = "%s>%s</%s>" % ( out, tag_dict['content'], tag_dict['tag'] )    else:        if ('single' in tag_dict) and (tag_dict['single']):            out = "%s />" % out        else:            out = "%s></%s>" % (out, tag_dict['tag'])        return out