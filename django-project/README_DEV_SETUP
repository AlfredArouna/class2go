Setting up a dev environment for class2go
=========================================

#########################
#        For Mac        #
#########################

General Instructions
* Set-up Python
* Set-up Python's virtual env
* Set-up Django
* Set-up Mysql

For MAC OS-X Lion: Instructions mainly taken from 
http://www.tlswebsolutions.com/mac-os-x-lion-setting-up-django-pip-virtualenv-and-homebrew/

Some people don't have their normal user set up with write permissions
for all these commands that modify the environment (brew, easy_install,
pip).  For all of those you should plan on running your own sudo
prefix for these.

1. Install XCode 
    Apple App Store

2. Within XCode, add the command line tools
    Preferences -> Download Item -> "Command Line Tools" Install button

3. Install Homebrew:
    /usr/bin/ruby -e "$(/usr/bin/curl -fksSL https://raw.github.com/mxcl/homebrew/master/Library/Contributions/install_homebrew.rb)"

4. Install Python (we are expecting 2.7.x):
    brew install readline sqlite gdbm 
    brew install python --universal --framework 

5. Install mysql
    brew install mysql
    (Optional but useful for looking at the database)
    Install phpmyadmin (?!) following the directions here:
    http://www.djangoapp.com/blog/2011/07/24/installing-phpmyadmin-on-mac-os-x-lion/

6. Install pip, a python package manager
    easy_install pip

7. Install python's virtual env
    pip install virtualenv 

8. Create the class2go virtual env 
    virtualenv django-class2go --no-site-packages    

    This should create the django-class2go directory under the
    directory where this README is found.  All our django stuff
    will happen in there now.

9. Start using the virtual environment that we just created.  
    . ./django-class2go/bin/activate

    WARNING: you need to do this from whatever shell you're using.
    You can tell this because is puts an environment indicator at
    the beginning of your prompt

10. Install django itself (this will be inside the virtualenv)
    pip install django

11. Install MySQL-python (this will be inside the virtualenv)
    pip install MySQL-python

12. Install python image library (this will be inside the virtualenv)
    pip install PIL

13. Install South, the database schema migration tool: (this will
    be inside the virtualenv)
    easy_install South

14. Setup initial db.
    ./manage.py syncdb
    ./manage.py migrate

At this point you should be able to look at the django database in
your local mysql and see a bunch of c2g_* tables.  Yay.

#########################
#      For Windows      #
#########################

	Eclipse Users and/or WAMP users:
	---------------------------------
		The following versions seem to be compatible:
		Python: 2.7.3
		Eclipse for PHP: Helios (http://download.eclipse.org/releases/helios)
		PyDev plugin for Eclipse: 2.5.0 (http://pydev.org/updates)
		Egit plugin for Eclipse: (http://download.eclipse.org/egit/updates)
		WAMPServer: 2.1 
	
	1. Install Eclipse

	2. Install Egit and configure it to the github repos (https://github.com/jbau/class2go)
	For this you would need Jason to set you up with access to this repos.
	Note, when configuring the Remote Push Url you'll need to add ".git" on the end:
	(https://github.com/jbau/class2go.git)


Everyone:
----------

Requirements
-------------
01. Prereqs: 
	If you do not have the following, install them:
		python 2.7
		django
		easy_install
		pip
		python image library (pip install PIL)

02. Install South, the database schema migration tool: (this will be inside the virtualenv)
    easy_install South

03. Create a database called c2g (for example).

04. Copy database.example.py to database.py.

05. In database.py, append ‘mysql’ to ENGINE, and enter the name of the database you created in step 1, and the credentials of an authorized user of the database (user ‘root’ and empty password may work on MySQL unless you specified otherwise during the MySQL setup)

06. Make sure you’re in the src/class2go/django-project directory (wherever that is for you)

07. ‘python manage.py syncdb’ followed by ‘python manage.py migrate’ to create the required database tables and make sure the schema is up to date.
You will be asked to create your admin account on the way. Skip it. You will later be able to create a user and promote it to admin manually using your DBMS client.

08. XX -- ‘python manage.py collectstatic    ’ to copy all static files to the directory specified in settings.py.

09. ‘python manage.py runserver xxxx’ to run a dev server on port number xxxx. Example: xxxx = 8000

10. Visit localhost:xxxx in your web browser and confirm that you get a C2G page.

##########################
#  Generating Test Data  #
##########################

01. Some schema mods were made so run: manage.py migrate

02. Take a look in c2g/views.py as there are some parameters that affect which data gets created. Note, if you choose the delete_current_data option it will delete your current django users so you’ll have to recreate those users if you want.

03. To run the script that populates the data run the url: http://localhost:8080/db_populate or whatever your version is.