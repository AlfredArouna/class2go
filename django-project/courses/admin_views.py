import osfrom django.http import HttpResponsefrom django.shortcuts import render_to_response, redirectfrom django.template import Context, loaderfrom django.template import RequestContextfrom django.contrib.auth.models import User,Groupfrom settings import CONTENT_FILESTOREfrom c2g.models import Course, Institutionfrom random import randrangeimport datetimedef admin(request, course_id):	return render_to_response('courses/admin.html', {'course_id': course_id, 'request': request}, context_instance=RequestContext(request))	def staff(request, course_id):	return render_to_response('courses/staff.html', {'course_id': course_id, 'request': request}, context_instance=RequestContext(request))	def new(request):		if request.method == 'POST':		inst_id = request.POST.get('institution')		handle = request.POST.get('prefix') + '-' + request.POST.get('suffix')				### Sanity checks ###		# Verify that the user is marked as staff member and, thus, has privilege to create a course		if not request.user.is_staff:			return HttpResponse('You are not allowed to create courses on Class2Go. If you feel this is an error, please contact the Class2Go team.')					# Verify that there is no course with the same handle		num_courses_with_same_handle = Course.objects.filter(handle=handle).count()		if num_courses_with_same_handle > 0:			return HttpResponse('A course with the same prefix and suffix already exists. Please choose a different prefix and/or suffix.')						### Create the new Course ###		r = randrange(0,100000000)		student_group = Group.objects.create(name="Student Group for class2go course " + handle + " %d" % r)		instructor_group = Group.objects.create(name="Instructor Group for class2go course " + handle + " %d" % r)		tas_group = Group.objects.create(name="TAS Group for class2go course " + handle + " %d" % r)		readonly_tas_group = Group.objects.create(name="Readonly TAS Group for class2go course " + handle + " %d" % r)				#Create the course object		start_date_elements = request.POST.get('start_date').split('-')		start_date_month = int(start_date_elements[0])		start_date_day = int(start_date_elements[1])		start_date_year = int(start_date_elements[2])				end_date_elements = request.POST.get('end_date').split('-')		end_date_month = int(end_date_elements[0])		end_date_day = int(end_date_elements[1])		end_date_year = int(end_date_elements[2])				course = Course(			institution_id = int(inst_id),			student_group_id = student_group.id,			instructor_group_id = instructor_group.id,			tas_group_id = tas_group.id,			readonly_tas_group_id = readonly_tas_group.id,			code = 'cs123',			title = request.POST.get('title'),			listing_description = 'LD',			mode = 'Live',			description = 'D',			staff_emails = 'abc',			term = request.POST.get('term'),			year = int(request.POST.get('year')),			calendar_start = datetime.datetime(start_date_year, start_date_month, start_date_day),			calendar_end = datetime.datetime(end_date_year, end_date_month, end_date_day),			meeting_info = 'MI',			feature_settings = '1,2,3',			membership_control = 'open',			join_password = 'abc',			list_publicly = 1,			handle=handle,		)		course.save()				#Add the professor to the instructor group		instructor_group.user_set.add(request.user)				# Create asset and content folders for the course in the content_filestore		os.mkdir(CONTENT_FILESTORE + handle)		os.mkdir(CONTENT_FILESTORE + handle + "/staging")		os.mkdir(CONTENT_FILESTORE + handle + "/staging/videos")		os.mkdir(CONTENT_FILESTORE + handle + "/staging/problem_sets")		os.mkdir(CONTENT_FILESTORE + handle + "/staging/course_info")		os.mkdir(CONTENT_FILESTORE + handle + "/production")		os.mkdir(CONTENT_FILESTORE + handle + "/production/videos")		os.mkdir(CONTENT_FILESTORE + handle + "/production/problem_sets")		os.mkdir(CONTENT_FILESTORE + handle + "/production/course_info")		os.mkdir(CONTENT_FILESTORE + handle + "/assets")		os.mkdir(CONTENT_FILESTORE + handle + "/assets/videos")		os.mkdir(CONTENT_FILESTORE + handle + "/assets/problem_sets")				# Create bootstrap content files		fd_s = os.open(CONTENT_FILESTORE + handle + "/staging/homepage_middle_column.html", os.O_CREAT|os.O_WRONLY)		fd_p = os.open(CONTENT_FILESTORE + handle + "/production/homepage_middle_column.html", os.O_CREAT|os.O_WRONLY)				content = '''<h2>''' + course.title + '''</h2>				<!-- Add any HTML content you want -->				<div class="announcements" />				<!-- Add any HTML content you want -->		'''				os.write(fd_s, content)		os.write(fd_p, content)				os.close(fd_s)		os.close(fd_p)				fd_s = os.open(CONTENT_FILESTORE + handle + "/staging/homepage_right_column.html", os.O_CREAT|os.O_WRONLY)		fd_p = os.open(CONTENT_FILESTORE + handle + "/production/homepage_right_column.html", os.O_CREAT|os.O_WRONLY)				content = '''				<div class="upcoming_deadlines" />				<div class="news_feed" />		'''		os.write(fd_s, content)		os.write(fd_p, content)				os.close(fd_s)		os.close(fd_p)				fd_s = os.open(CONTENT_FILESTORE + handle + "/staging/video_list.html", os.O_CREAT|os.O_WRONLY)		fd_p = os.open(CONTENT_FILESTORE + handle + "/production/video_list.html", os.O_CREAT|os.O_WRONLY)				content = '''<h2>Videos for ''' + course.title + '''</h2>				<p>There are no videos to display</p>		'''				os.write(fd_s, content)		os.write(fd_p, content)				os.close(fd_s)		os.close(fd_p)				fd_s = os.open(CONTENT_FILESTORE + handle + "/staging/problem_set_list.html", os.O_CREAT|os.O_WRONLY)		fd_p = os.open(CONTENT_FILESTORE + handle + "/production/problem_set_list.html", os.O_CREAT|os.O_WRONLY)				content = '''<h2>Problem Sets for ''' + course.title + '''</h2>				<p>There are no problem sets to display</p>		'''				os.write(fd_s, content)		os.write(fd_p, content)				os.close(fd_s)		os.close(fd_p)						fd_s = os.open(CONTENT_FILESTORE + handle + "/staging/course_info/course_description.html", os.O_CREAT|os.O_WRONLY)		fd_p = os.open(CONTENT_FILESTORE + handle + "/production/course_info/course_description.html", os.O_CREAT|os.O_WRONLY)				content = '''<h2>Course Description for ''' + course.title + '''</h2>'''				os.write(fd_s, content)		os.write(fd_p, content)				os.close(fd_s)		os.close(fd_p)				fd_s = os.open(CONTENT_FILESTORE + handle + "/staging/course_info/syllabus.html", os.O_CREAT|os.O_WRONLY)		fd_p = os.open(CONTENT_FILESTORE + handle + "/production/course_info/syllabus.html", os.O_CREAT|os.O_WRONLY)				content = '''<h2>Syllabus for ''' + course.title + '''</h2>'''				os.write(fd_s, content)		os.write(fd_p, content)				os.close(fd_s)		os.close(fd_p)				fd_s = os.open(CONTENT_FILESTORE + handle + "/staging/course_info/prerequisites.html", os.O_CREAT|os.O_WRONLY)		fd_p = os.open(CONTENT_FILESTORE + handle + "/production/course_info/prerequisites.html", os.O_CREAT|os.O_WRONLY)				content = '''<h2>Prerequisites for ''' + course.title + '''</h2>'''				os.write(fd_s, content)		os.write(fd_p, content)				os.close(fd_s)		os.close(fd_p)				return redirect('courses.views.view', course_prefix = request.POST.get('prefix'), course_suffix = request.POST.get('suffix'))	else:		now = datetime.datetime.now()		date = "%02d-%02d-%04d" %(now.month, now.day, now.year)				# List of institutions		institutions = Institution.objects.all()				return render_to_response('courses/new.html', {'request': request, 'date': date, 'institutions': institutions }, context_instance=RequestContext(request))